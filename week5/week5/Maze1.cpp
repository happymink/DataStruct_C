#include <stdio.h>
#include <stdlib.h>

int maze[8][10] = {
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 0, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1
};

int maze2[8][10] =
{
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 0, 0, 0, 0, 1, 1,
	1, 0, 0, 0, 0, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1
};

int maze3[8][10] =
{
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 0, 0, 0, 0, 1, 1,
	1, 0, 0, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1
};

int f[8][10]; //지나온 경로를 담아두기 위한 배열

void find(int i, int j) 
{
	f[i][j] = 1; //지금 좌표는 지나온 곳으로 표기
	printf("%d %d\n", i, j);
	// 오른쪽 탐색 조건
	if (j + 1 < 10 && maze[i][j + 1] != 1 && f[i][j + 1] == 0)
		find(i, j + 1);
	// 왼쪽 탐색 조건
	if (j - 1 >= 0 && maze[i][j - 1] != 1 && f[i][j - 1] == 0)
		find(i, j - 1);
	// 아래쪽 탐색 조건
	if (i + 1 < 8 && maze[i + 1][j] != 1 && f[i + 1][j] == 0)
		find(i + 1, j);
	// 위쪽 탐색 조건
	if (i - 1 >= 0 && maze[i - 1][j] != 1 && f[i - 1][j] == 0)
		find(i - 1, j);

}

int f2[8][10]; //지나온 경로를 담아두기 위한 배열 2

void find2(int i, int j) 
{
	f2[i][j] = 1;
	printf("%d %d\n", i, j);

	if (i == 7 && j == 7) {
		printf("Find End\n");
	}
	// 오른쪽 탐색 조건
	if (j + 1 < 10 && maze2[i][j + 1] != 1 && f2[i][j + 1] == 0)
		find2(i, j + 1);
	// 왼쪽 탐색 조건
	if (j - 1 >= 0 && maze2[i][j - 1] != 1 && f2[i][j - 1] == 0)
		find2(i, j - 1);
	// 아래쪽 탐색 조건
	if (i + 1 < 8 && maze2[i + 1][j] != 1 && f2[i + 1][j] == 0)
		find2(i + 1, j);
	// 위쪽 탐색 조건
	if (i - 1 >= 0 && maze2[i - 1][j] != 1 && f2[i - 1][j] == 0)
		find2(i - 1, j);

	f2[i][j] = 0;
}

int f3[8][10]; //지나온 경로를 담아두기 위한 배열 3

void find3(int i, int j)
{
	f3[i][j] = 1;
	printf("%d %d\n", i, j);

	if (i == 7 && j == 7) {
		printf("Find End\n");
	}
	// 오른쪽 탐색 조건
	if (j + 1 < 10 && maze3[i][j + 1] != 1 && f3[i][j + 1] == 0)
		find3(i, j + 1);
	// 왼쪽 탐색 조건
	if (j - 1 >= 0 && maze3[i][j - 1] != 1 && f3[i][j - 1] == 0)
		find3(i, j - 1);
	// 아래쪽 탐색 조건
	if (i + 1 < 8 && maze3[i + 1][j] != 1 && f3[i + 1][j] == 0)
		find3(i + 1, j);
	// 위쪽 탐색 조건
	if (i - 1 >= 0 && maze3[i - 1][j] != 1 && f3[i - 1][j] == 0)
		find3(i - 1, j);

	f3[i][j] = 0;
}

int main()
{
	printf("maze 미로 찾기 시작\n");
	find(1, 0); //출발지점 1, 0
	printf("maze 미로 찾기 끝\n");

	printf("maze2 미로 찾기 시작\n");
	find2(1, 0); //출발지점 1, 0
	printf("maze2 미로 찾기 끝\n");

	printf("maze3 미로 찾기 시작\n");
	find3(1, 0); //출발지점 1, 0
	printf("maze3 미로 찾기 끝\n");
}